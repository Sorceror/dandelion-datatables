{"name":"Dandelion-datatables","tagline":"Dandelion module for DataTables (JQuery library)","body":"### Introduction\r\n**Dandelion-datatables** is a continuation of the previous [DataTables4j](http://datatables4j.github.com/docs) project. For now, it's just a simple renaming (and internal structure simplifications also) but in a near future, we will inform you of features and services connected with Dandelion ! \r\n\r\nAt the moment, we just ask you to start migrating your apps from DataTables4j to Dandelion-datatables. As you will see in the following section, the workload is quite limited! :-) \r\n\r\n### Migrating from DataTables4j to Dandelion-datatables\r\n#### Using JSP\r\n##### Step 1 : update dependencies \r\nFrom :\r\n```\r\n<dependency>\r\n   <groupId>com.github.datatables4j</groupId>\r\n   <artifactId>datatables4j-core-jsp</artifactId>\r\n   <version>0.8.3</version>\r\n</dependency>\r\n```\r\nTo :\r\n```\r\n<dependency>\r\n   <groupId>com.github.dandelion</groupId>\r\n   <artifactId>datatables-jsp</artifactId>\r\n   <version>0.8.4</version>\r\n</dependency>\r\n```\r\n**Warning !**\r\nEnsure to delete all DataTables4j dependencies to avoid classpath conflicts.\r\n\r\n##### Step 2 : update taglib URI\r\nFrom :\r\n```\r\n<%@ taglib prefix=\"datatables\" uri=\"http://github.com/datatables4j\" %>\r\n```\r\nTo :\r\n```\r\n<%@ taglib prefix=\"datatables\" uri=\"http://github.com/dandelion/datatables\" %>\r\n```\r\n\r\n##### Step 3 (optional) : servlet 2.x\r\nIf you were using the [Servlet2 compatibility module](https://github.com/datatables4j/datatables4j-backward-servlet2.x), first ensure to update the dependency from :\r\n```\r\n<dependency>\r\n   <groupId>com.github.datatables4j</groupId>\r\n   <artifactId>datatables4j-servlet2</artifactId>\r\n   <version>0.1.2</version>\r\n</dependency>\r\n```\r\nTo :\r\n```\r\n<dependency>\r\n   <groupId>com.github.dandelion</groupId>\r\n   <artifactId>datatables-servlet2</artifactId>\r\n   <version>0.1.3</version>\r\n</dependency>\r\n```\r\nThen, ensure to update the qualified class names in `web.xml` :\r\n```\r\n<!-- Dandelion-datatables servlet definition -->\r\n<servlet>\r\n   <servlet-name>datatablesController</servlet-name>\r\n   <servlet-class>com.github.dandelion.datatables.extras.servlet2.servlet.DatatablesServlet</servlet-class>\r\n</servlet>\r\n\r\n<!-- Dandelion-datatables servlet mapping -->\r\n<servlet-mapping>\r\n   <servlet-name>datatablesController</servlet-name>\r\n   <url-pattern>/datatablesController/*</url-pattern>\r\n</servlet-mapping>\r\n\r\n<!-- DataTables4j filter definition -->\r\n<filter>\r\n   <filter-name>datatablesFilter</filter-name>\r\n   <filter-class>com.github.dandelion.datatables.extras.servlet2.filter.DatatablesFilter</filter-class>\r\n</filter>\r\n\r\n<!-- DataTables4j filter mapping -->\r\n<filter-mapping>\r\n   <filter-name>datatablesFilter</filter-name>\r\n   <url-pattern>/*</url-pattern>\r\n</filter-mapping>\r\n```\r\n\r\n##### Step 4 (optional) : Spring 3\r\nIf you were using the [Spring 3 extra module](https://github.com/datatables4j/datatables4j-core-parent/tree/master/datatables4j-spring3)(used in server-side processing), ensure to update the qualified class name in you Spring MVC configuration :\r\n```\r\n<mvc:annotation-driven>\r\n   <mvc:argument-resolvers>\r\n      <bean class=\"com.github.dandelion.datatables.extras.spring3.ajax.DatatablesCriteriasResolver\" />\r\n   </mvc:argument-resolvers>\r\n</mvc:annotation-driven>\r\n```\r\n\r\n#### Using Thymeleaf\r\nTODO","google":"UA-33818546-7","note":"Don't delete this file! It's used internally to help with page regeneration."}